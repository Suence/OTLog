//------------------------------------------------------------------------------
// <auto-generated>
//     ?????????
//     ?????:4.0.30319.42000
//
//     ???????????????????????
//     ????????????????
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace OTLog.Controls.Shaders {
	
	/// <summary>A transition effect </summary>
	public class Transition_RippleEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(Transition_RippleEffect), 0);
		public static readonly DependencyProperty Texture2Property = ShaderEffect.RegisterPixelShaderSamplerProperty("Texture2", typeof(Transition_RippleEffect), 1);
		public static readonly DependencyProperty ProgressProperty = DependencyProperty.Register("Progress", typeof(double), typeof(Transition_RippleEffect), new UIPropertyMetadata(((double)(30D)), PixelShaderConstantCallback(0)));
		public Transition_RippleEffect() {
			PixelShader pixelShader = new PixelShader();
			pixelShader.UriSource = new Uri("/OTLog.Controls;component/Shaders/PS/Transition_RippleEffect.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(Texture2Property);
			this.UpdateShaderValue(ProgressProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		public Brush Texture2 {
			get {
				return ((Brush)(this.GetValue(Texture2Property)));
			}
			set {
				this.SetValue(Texture2Property, value);
			}
		}
		/// <summary>The amount(%) of the transition from first texture to the second texture. </summary>
		public double Progress {
			get {
				return ((double)(this.GetValue(ProgressProperty)));
			}
			set {
				this.SetValue(ProgressProperty, value);
			}
		}
	}
}
